// Code generated by MockGen. DO NOT EDIT.
// Source: app/infra/user_infra.go

// Package mock_infra is a generated GoMock package.
package mock_infra

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/yamato0204/go-test.git/app/entities"
)

// MockIUserInfra is a mock of IUserInfra interface.
type MockIUserInfra struct {
	ctrl     *gomock.Controller
	recorder *MockIUserInfraMockRecorder
}

// MockIUserInfraMockRecorder is the mock recorder for MockIUserInfra.
type MockIUserInfraMockRecorder struct {
	mock *MockIUserInfra
}

// NewMockIUserInfra creates a new mock instance.
func NewMockIUserInfra(ctrl *gomock.Controller) *MockIUserInfra {
	mock := &MockIUserInfra{ctrl: ctrl}
	mock.recorder = &MockIUserInfraMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserInfra) EXPECT() *MockIUserInfraMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIUserInfra) Create(user *entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIUserInfraMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserInfra)(nil).Create), user)
}

// Delete mocks base method.
func (m *MockIUserInfra) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIUserInfraMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIUserInfra)(nil).Delete), id)
}

// FindByID mocks base method.
func (m *MockIUserInfra) FindByID(id string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockIUserInfraMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockIUserInfra)(nil).FindByID), id)
}

// Update mocks base method.
func (m *MockIUserInfra) Update(user *entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIUserInfraMockRecorder) Update(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIUserInfra)(nil).Update), user)
}
